@inject NavigationManager NavigationManager
@inject IJSRuntime _jsRuntime

@if (ZV.BlockNumber < API.EarliestZMBlock)
{
    <div class="alert alert-warning" role="alert">
        no time order data before block @API.EarliestZMBlock
    </div>
}

@if (ZV.BlockNumber < API.EarliestMevBlock)
{
    <div class="alert alert-warning" role="alert">
        no mev data before block @API.EarliestMevBlock
    </div>
}

@{
    ZV.SetOrderBy(Order);
    bool isDisabled = (ZV.TxCount == 0 || !ZV.HasZM);
    string canvasStyle = null;
    if (!isDisabled)
        canvasStyle = "border:1px solid #000000";
    if (!ZV.HasMEV) SetFilter(MEVFilter.All);

    <div class="row-filter">
        <div class="order-group">
            <div class="btn-group" role="group" aria-label="transaction filter">
                <abbr title="the final block order chosen by the miner"><button type="button" class="btn btn-outline-light @(ZV.OrderBy==OrderBy.Block?"active":"text-dark")" @onclick="async () => await SetOrder(OrderBy.Block)">block order</button></abbr>
                <abbr title="the order if the miner had ordered by gas price"><button type="button" class="btn btn-outline-light @(ZV.OrderBy==OrderBy.Gas?"active":"text-dark")" @onclick="async () => await SetOrder(OrderBy.Gas)">gas order</button></abbr>
                <abbr title="the order if the miner had ordered fairly by arrival time"><button type="button" class="btn btn-outline-light @(ZV.OrderBy==OrderBy.Time?"active":"text-dark")" @onclick="async () => await SetOrder(OrderBy.Time)" disabled="@isDisabled">fair order</button></abbr>
            </div>
            @if (TxIndex.HasValue)
            {
                <button type="button" class="btn btn-outline-light text-dark ms-4" onclick="javascript:blazorHelpers.scrollToFragment('selected');"><img src="jump.svg" width="16" height="20" />  Jump To Tx</button>
            }
        </div>
        <div class="filter-group">
            <div class="btn-group" role="group" aria-label="transaction filter">
                <abbr title="all (@ZV.TxCount)"><button type="button" class="btn btn-outline-light @(Filter==MEVFilter.All?"active":"text-dark")" @onclick="() => SetFilter(MEVFilter.All)" disabled="@(!ZV.HasMEV)"><img src="filter.svg" width="20" height="20" />all</button></abbr>
                <abbr title="info (@ZV.MEVSummaries[(int)MEVFilter.Info].Count)"><button type="button" class="btn btn-outline-light @(Filter==MEVFilter.Info?"active":"text-dark")" @onclick="() => SetFilter(MEVFilter.Info)" disabled="@(!ZV.HasMEV)"><img src="filter.svg" width="20" height="20" />info</button></abbr>
                <abbr title="toxic mev (@ZV.MEVSummaries[(int)MEVFilter.Toxic].Count)"><button type="button" class="btn btn-outline-light @(Filter==MEVFilter.Toxic?"active":"text-dark")" @onclick="() => SetFilter(MEVFilter.Toxic)" disabled="@(!ZV.HasMEV)"><img src="filter.svg" width="20" height="20" />toxic</button></abbr>
                <abbr title="other mev (@ZV.MEVSummaries[(int)MEVFilter.Other].Count)"><button type="button" class="btn btn-outline-light @(Filter==MEVFilter.Other?"active":"text-dark")" @onclick="() => SetFilter(MEVFilter.Other)" disabled="@(!ZV.HasMEV)"><img src="filter.svg" width="20" height="20" />other</button></abbr>
            </div>
        </div>
    </div>

    @if (ZV.HasZM)
    {
        if (ZV.TxCount >= 391)
        {
            <div style="max-width: @(ZV.TxCount)px">
                <canvas id="orderCanvas" style="@canvasStyle; width:100%; height: 8px"></canvas>
            </div>
        }
        else
        {
            <canvas id="orderCanvas" width="@ZV.TxCount" height="8" style="@canvasStyle"></canvas>
        }
    }
}

<div id='txtablediv' class="">
    <table id='txtable' name="txtable" class="table table-hover table-sm">
        <thead>
            <tr>
                <th scope="col">time</th>
                <th scope="col" class="px-2"></th>
                <th scope="col">delay</th>
                <th scope="col">mev</th>
                <th scope="col">impact</th>
                <th scope="col">action</th>
                <th scope="col"><img src="FB.png" /></th>
                <th scope="col">txn hash</th>
                <th scope="col">arrival time</th>
                <th scope="col">from</th>
                <th scope="col">to</th>
                <th scope="col">value (Eth)</th>
                <th scope="col">gas price (Gwei)</th>
            </tr>
        </thead>
        <tbody>
            @{
                filtered = ZV.GetFiltered(Filter);
                <Virtualize Items="@filtered" Context="tx" OverscanCount=@(!TxIndex.HasValue||TxIndex.Value<3?3:TxIndex.Value)>
                    <tr id="@tx.TrId(TxIndex)" class="@tx.TrClass(TxIndex)">
                        <td>@(ZV.HasZM ? tx.TimeOrderIndex : "-")</td>
                        <td style="@(ZV.HasZM ? "background-color:"+tx.HeatmapRGB: null)"></td>
                        <td style="width: 120px"><abbr title="@((MarkupString)tx.InclusionDelayDetail)">@(ZV.HasZM ? tx.InclusionDelayShort : "-")</abbr></td>
                        @if (MEVWeb.Get(tx.MEVClass).IsVisible)
                        {
                            <td><abbr title="@tx.MEVDetail"><span class="badge text-light @MEVWeb.CssClass(tx.MEVClass)">@tx.MEVName</span></abbr></td>
                        }
                        else
                        {
                            <td></td>
                        }
                        <td>@tx.MEVAmountStr</td>
                        @if (tx.MEVActionDetail == null)
                        {
                            <td>@((MarkupString)tx.MEVActionSummary)</td>
                        }
                        else
                        {
                            <td><abbr title="@tx.MEVActionDetail">@((MarkupString)tx.MEVActionSummary)</abbr></td>
                        }
                        <td>@tx.Bundle</td>
                        <td>@((MarkupString)tx.TxnHashShort)</td>
                        <td><abbr title="@((MarkupString)tx.TimeOrderDetail)">@(ZV.HasZM ? tx.TimeOrder.ToString(Time.Format) : "-")</abbr></td>
                        <td>@((MarkupString)tx.FromShort)</td>
                        <td>@((MarkupString)tx.ToShort)</td>
                        <td>@tx.Value</td>
                        <td>@tx.GasPrice</td>
                    </tr>
                </Virtualize>
            }
        </tbody>
    </table>
</div>

@if (ZV.TxCount == 0)
{
    <div class="alert alert-info" role="alert">
        no transactions in this block
    </div>
}

@code {
    [Parameter]
    public ZMView? ZV { get; set; }

    [Parameter]
    public int? TxIndex { get; set; }

    MEVFilter Filter { get; set; } = MEVFilter.All;
    OrderBy Order { get; set; } = OrderBy.Block;
    List<ZMTx> filtered = new List<ZMTx>();
    byte[] R, G, B;

    private void SetFilter(MEVFilter filter)
    {
        Filter = filter;
    }


    private async Task SetOrder(OrderBy order)
    {
        Order = order;
        if (ZV != null)
        {
            ZV.SetOrderBy(order);
            await DisplayOrderBar();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await DisplayOrderBar();
        await Task.Delay(500);
        await _jsRuntime.InvokeVoidAsync("makeTableResponsive");
    }

    private async Task DisplayOrderBar()
    {
        if (ZV == null || ZV.Txs == null)
            return;

        int len = ZV.Txs.Length;
        if (R == null || R.Length != len)
        {
            R = new Byte[len];
            G = new Byte[len];
            B = new Byte[len];
        }

        for (int i = 0; i < len; i++)
        {
            ZMTx tx = ZV.Txs[i];
            R[i] = tx.R;
            G[i] = tx.G;
            B[i] = tx.B;
        }

        try
        {
            await _jsRuntime.InvokeVoidAsync("orderBar", R, G, B);
        }
        catch (Exception ex)
        {
        }
    }
}
