@inject NavigationManager NavigationManager
@inject IJSRuntime _jsRuntime

@if (ZV.BlockNumber < API.EarliestZMBlock)
{
    <div class="alert alert-warning" role="alert">
        no zeromev time order data available before block @API.EarliestZMBlock
    </div>
}
else
{
    ZV.SetOrderBy(Order);
    bool isDisabled = (ZV.TxCount == 0);
    string canvasStyle = null;
    if (!isDisabled)
        canvasStyle = "border:1px solid #000000";

    <div class="row">
        <div class="col">
            <div class="btn-group" role="group" aria-label="transaction filter">
                <button type="button" class="btn btn-outline-light @(ZV.OrderBy==OrderBy.Time?"active":"text-dark")" @onclick="async () => await SetOrder(OrderBy.Time)" disabled="@isDisabled">fair order</button>
                <button type="button" class="btn btn-outline-light @(ZV.OrderBy==OrderBy.Gas?"active":"text-dark")" @onclick="async () => await SetOrder(OrderBy.Gas)" disabled="@isDisabled">gas order</button>
                <button type="button" class="btn btn-outline-light @(ZV.OrderBy==OrderBy.Block?"active":"text-dark")" @onclick="async () => await SetOrder(OrderBy.Block)" disabled="@isDisabled">block order</button>
            </div>
            @if (TxIndex.HasValue)
            {
                <button type="button" class="btn btn-outline-light text-dark ms-4" onclick="javascript:blazorHelpers.scrollToFragment('selected');"><img src="jump.svg" width="16" height="20" />  Jump To Tx</button>
            }
        </div>
        <div class="col">
            <div class="btn-group" role="group" aria-label="transaction filter">
                <button type="button" class="btn btn-outline-light @(Filter==MEVFilter.All?"active":"text-dark")" @onclick="() => SetFilter(MEVFilter.All)" disabled="@isDisabled"><img src="filter.svg" width="20" height="20" />all (@ZV.TxCount)</button>
                <button type="button" class="btn btn-outline-light @(Filter==MEVFilter.Info?"active":"text-dark")" @onclick="() => SetFilter(MEVFilter.Info)" disabled="@isDisabled"><img src="filter.svg" width="20" height="20" />info (@ZV.MEVSummaries[(int)MEVFilter.Info].Count)</button>
                <button type="button" class="btn btn-outline-light @(Filter==MEVFilter.Toxic?"active":"text-dark")" @onclick="() => SetFilter(MEVFilter.Toxic)" disabled="@isDisabled"><img src="filter.svg" width="20" height="20" />toxic mev (@ZV.MEVSummaries[(int)MEVFilter.Toxic].Count)</button>
                <button type="button" class="btn btn-outline-light @(Filter==MEVFilter.Other?"active":"text-dark")" @onclick="() => SetFilter(MEVFilter.Other)" disabled="@isDisabled"><img src="filter.svg" width="20" height="20" />other (@ZV.MEVSummaries[(int)MEVFilter.Other].Count)</button>
            </div>
        </div>
    </div>
    <canvas id="orderCanvas" width="@ZV.TxCount" height="8" style="@canvasStyle"></canvas>
}

<table name="txtable" class="table table-hover table-sm">
    <thead>
        <tr>
            <th scope="col">time</th>
            <th scope="col" class="px-2"></th>
            <th scope="col">delay</th>
            <th scope="col">txn hash</th>
            <th scope="col">arrival time</th>
            <th scope="col">action</th>
            <th scope="col">mev</th>
            <th scope="col">impact</th>
            <th scope="col"><img src="FB.png" /></th>
            <th scope="col">from</th>
            <th scope="col">to</th>
            <th scope="col">value (Eth)</th>
            <th scope="col">gas price (Gwei)</th>
        </tr>
    </thead>
    <tbody>
        @if (ZV.HasZM)
        {
            filtered = ZV.GetFiltered(Filter);
            <Virtualize Items="@filtered" Context="tx" OverscanCount=@(!TxIndex.HasValue||TxIndex.Value<3?3:TxIndex.Value)>
                <tr id="@tx.TrId(TxIndex)" class="@tx.TrClass(TxIndex)">
                    <td>@tx.TimeOrderIndex</td>
                    <td style="background-color:@tx.HeatmapRGB"></td>
                    <td><abbr title="@((MarkupString)tx.InclusionDelayDetail)">@tx.InclusionDelayShort</abbr></td>
                    <td>@((MarkupString)tx.TxnHashShort)</td>
                    <td><abbr title="@((MarkupString)tx.TimeOrderDetail)">@(tx.TimeOrder.ToString(Time.Format))</abbr></td>
                    @if (tx.MEVActionDetail == null)
                {
                    <td>@((MarkupString)tx.MEVActionSummary)</td>
                }
                else
                {
                    <td><abbr title="@tx.MEVActionDetail">@((MarkupString)tx.MEVActionSummary)</abbr></td>
                }
                @if (MEVWeb.Get(tx.MEVClass).IsVisible)
                {
                    <td><abbr title="@tx.MEVDetail"><span class="badge text-light @MEVWeb.CssClass(tx.MEVClass)">@tx.MEVName</span></abbr></td>
                }
                else
                {
                    <td></td>
                }
                <td>@tx.MEVAmountStr</td>
                <td>@tx.Bundle</td>
                <td>@((MarkupString)tx.FromShort)</td>
                <td>@((MarkupString)tx.ToShort)</td>
                <td>@tx.Value</td>
                <td>@tx.GasPrice</td>
            </tr>
        </Virtualize>
        }
        else
        {
            filtered = ZV.GetFiltered(Filter);
            <Virtualize Items="@filtered" Context="tx" OverscanCount=@(!TxIndex.HasValue||TxIndex.Value<3?3:TxIndex.Value)>
                <tr class="@tx.TrClass(TxIndex)">
                    <td>-</td>
                    <td></td>
                    <td>-</td>
                    <td>@((MarkupString)tx.TxnHashShort)</td>
                    @if (tx.MEVActionDetail == null)
                {
                    <td>@((MarkupString)tx.MEVActionSummary)</td>
                }
                else
                {
                    <td><abbr title="@tx.MEVActionDetail">@((MarkupString)tx.MEVActionSummary)</abbr></td>
                }
                @if (MEVWeb.Get(tx.MEVClass).IsVisible)
                {
                    <td><abbr title="@tx.MEVDetail"><span class="badge text-light @MEVWeb.CssClass(tx.MEVClass)">@tx.MEVName</span></abbr></td>
                }
                else
                {
                    <td></td>
                }
                <td>@tx.MEVAmountStr</td>
                <td>@tx.Bundle</td>
                <td>@((MarkupString)tx.FromShort)</td>
                <td>@((MarkupString)tx.ToShort)</td>
                <td>@tx.Value</td>
                <td>@tx.GasPrice</td>
            </tr>
        </Virtualize>
        }
    </tbody>
</table>

@if (ZV.TxCount == 0)
{
    <div class="alert alert-info" role="alert">
        no transactions in this block
    </div>
}

@code {
    [Parameter]
    public ZMView? ZV { get; set; }

    [Parameter]
    public int? TxIndex { get; set; }

    MEVFilter Filter { get; set; } = MEVFilter.All;
    OrderBy Order { get; set; } = OrderBy.Block;
    List<ZMTx> filtered = new List<ZMTx>();
    byte[] R, G, B;

    private void SetFilter(MEVFilter filter)
    {
        Filter = filter;
    }


    private async Task SetOrder(OrderBy order)
    {
        Order = order;
        if (ZV != null)
        {
            ZV.SetOrderBy(order);
            await DisplayOrderBar();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await DisplayOrderBar();
    }

    private async Task DisplayOrderBar()
    {
        if (ZV == null || ZV.Txs == null)
            return;

        int len = ZV.Txs.Length;
        if (R == null || R.Length != len)
        {
            R = new Byte[len];
            G = new Byte[len];
            B = new Byte[len];
        }

        for (int i = 0; i < len; i++)
        {
            ZMTx tx = ZV.Txs[i];
            R[i] = tx.R;
            G[i] = tx.G;
            B[i] = tx.B;
        }

        try
        {
            await _jsRuntime.InvokeVoidAsync("orderBar", R, G, B);
        }
        catch (Exception ex)
        {
        }
    }
}