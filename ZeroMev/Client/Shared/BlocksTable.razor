@inject HttpClient Http
@inject ZMCache Cache
@inject NavigationManager NavigationManager

@if (MEVLiteCache == null)
{
    <div class="card text-dark bg-light mb-3" aria-hidden="true">
        <div class="card-body">
            <h4 class="placeholder-glow"><span class="placeholder col-8"></span></h4>
        </div>
    </div>

    <div class="card text-dark bg-light mb-3" aria-hidden="true">
        <div class="card-body">
            <h5 class="card-title placeholder-glow"><span class="placeholder col-3"></span></h5>
            <p class="card-text placeholder-glow">
                <span class="placeholder col-3"></span><br>
                <span class="placeholder col-5"></span><br>
                <span class="placeholder col-4"></span><br><br>
                <span class="placeholder col-4"></span><br>
            </p>
        </div>
    </div>

    <div class="line">
        <p class="placeholder-glow" aria-hidden="true">
            <span class="placeholder col-1"></span>
        </p>
        @{
            for (int i = 0; i < 30; i++)
            {
                <p class="placeholder-glow">
                <span class="placeholder col-2"></span><br>
                <span class="placeholder col-3"></span><br>
                </p>
                <p class="placeholder-glow">
                    <span class="placeholder col-1"></span>
                    <span class="placeholder col-1"></span>
                    <span class="placeholder col-1"></span>
                    <span class="placeholder col-1"></span>
                </p>
                <hr />
            }
        }
    </div>
}
else
{
    MEVLiteCache.CalculateSummaries();

    <div class="card text-dark bg-light mb-3">
        <div class="card-body">
            <a href="http://info.zeromev.org/explorer.html" target="_blank" ><h4 class="lighter-text" title="The zeromev frontrunning explorer shows details of Miner Extractable Value (MEV) and transaction reordering (frontrunning and censorship) on the Ethereum network">ethereum frontrunning explorer <img class="imgbtn" src="/help.svg" width=24 height=24></h4></a>
            <p class="card-text">
                get started or learn more on our <a href="http://info.zeromev.org/index.html" target="_blank" title="find out more about us and mev and take steps to protect yourself from toxic MEV"><u style="border-bottom: 1px dashed #999; text-decoration: none;">info pages</u></a>
            </p>
        </div>
    </div>

    <div class="card text-dark bg-light mb-3">
        <div class="card-body">
            <h5 class="card-title">recent user losses</h5>
            <span class=""><img src="/time.svg" width=24 height=24> over the last hour</span>
            <p class="card-text">
                <a href="http://info.zeromev.org/terms.html#toxic-mev" target="_blank" title="Toxic MEV is the loss incurred to users by miners frontrunning or censoring their transactions, eg: sandwich attacks. The hallmark of toxic MEV is miners reordering user transactions for their own profit"><span class="badge text-light @MEVWeb.CssClass(MEVClass.Toxic)">Toxic</span> frontrunning caused <span class="@(MEVLiteCache.Totals[(int)MEVFilter.Toxic].AmountUsd==0?null:"fw-bold text-danger")">$@(MEVLiteCache.Totals[(int)MEVFilter.Toxic].AmountUsd.ToString("0.00"))</span> in user losses <img class="imgbtn" src="/help.svg" width=24 height=24></a>
                <br>
                <a href="http://info.zeromev.org/terms.html#unclassified-mev" target="_blank" title="Unclassified MEV which may be toxic or neutral"><span class="badge text-light @MEVWeb.CssClass(MEVClass.Unclassified)">Other</span> mev totalled <b>$@(MEVLiteCache.Totals[(int)MEVFilter.Other].AmountUsd.ToString("0.00"))</b>. <img class="imgbtn" src="/help.svg" width=24 height=24></a>
                <br>
                <br>
                watch our <a href="https://info.zeromev.org/explorer.html#walkthrough" target="_blank" title="let us show you around the zeromev ethereum frontrunning explorer with this walkthrough video"><u style="border-bottom: 1px dashed #999; text-decoration: none;">walkthrough</u></a> video
            </p>
        </div>
    </div>

    <div class="line">
        <p class="mt-2">
            <button type="button" title="click to get the latest mev data" class="btn btn-outline-light active" @onclick=@RefreshPage disabled="@IsRefreshing"><img src="/refresh.svg" width="24" height="24" /> refresh</button>
        </p>
        <Virtualize Items="@MEVLiteCache.Blocks" Context="mb">
            <p>
                <a href="block?num=@mb.BlockNumber" class="link-primary" title="click to view MEV and transaction ordering details for block number @mb.BlockNumber">
                    <img src="/block.svg" width=24 height=24> @mb.BlockNumber
                    <br /><img src="/time.svg" width=24 height=24> @(mb.BlockTime == null ? "?" : mb.BlockTime.Value.ToString(Time.FormatShort))
                </a>
            </p>
            @foreach (var m in mb.MEVLite)
        {
            <span style="display: inline-block; white-space: nowrap;">
                <a href="block?num=@mb.BlockNumber" title="@(m.MEVClass==MEVClass.Toxic ? "Toxic MEV is the loss incurred to users by miners frontrunning or censoring their transactions" : "Unclassified MEV which may be toxic or neutral")">
                    <span class="badge text-light mx-2 @MEVWeb.CssClass(m.MEVClass)">@m.MEVType.ToString()</span>
                </a>
                @if (m.MEVAmountUsd.HasValue)
                {
                    <abbr title="shows the loss to the user of this instance of MEV">@("$"+m.MEVAmountUsd.Value.ToString("0.00"))</abbr>
                }
            </span>
        }
        <hr />
    </Virtualize>
</div>
}

@code {
    [Parameter]
    public MEVLiteCache? MEVLiteCache { get; set; }

    long LastBlockNumber = -1;
    private bool IsRefreshing = false;

    private async void RefreshPage()
    {
        IsRefreshing = true;
        this.StateHasChanged();

        var newCache = await API.GetMEVLiteCache(Http, LastBlockNumber);
        if (newCache != null)
        {
            MEVLiteCache = newCache;
            if (newCache.LastBlockNumber.HasValue)
                LastBlockNumber = newCache.LastBlockNumber.Value;
            Cache.SetLastBlockNumber(LastBlockNumber);
        }
        else
        {
            await Task.Delay(500);
        }

        IsRefreshing = false;
        this.StateHasChanged();
    }
}