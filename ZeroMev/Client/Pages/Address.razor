@page "/address"
@inject HttpClient Http
@inject ZMCache Cache
@inject NavigationManager NavigationManager

@if (addrTxs == null)
{
    <p><em>loading account...</em></p>
}
else
{
    <p class="h3">address <small>@Addr</small></p>

    <table class="table table-hover table-sm">
        <thead>
            <tr>
                <th scope="col">tx hash</th>
                <th scope="col">nonce</th>
                <th scope="col">block number</th>
                <th scope="col">time</th>
                <th scope="col">from</th>
                <th scope="col">to</th>
                <th scope="col">value (Eth)</th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Items="@addrTxs" Context="tx">
                <tr>
                    <td><a href="block?num=@tx.BlockNumber&txi=@tx.TransactionIndex">@((MarkupString)Num.ShortenHexAbbr(tx.Hash,16))</a></td>
                    <td>@tx.Nonce</td>
                    <td>@tx.BlockNumber</td>
                    <td>@(DateTimeOffset.FromUnixTimeSeconds(long.Parse(tx.TimeStamp)).ToUniversalTime().DateTime)</td>
                    <td>@((MarkupString)Num.ShortenHexAbbr(tx.From,16))</td>
                    <td>@((MarkupString)Num.ShortenHexAbbr(tx.To,16))</td>
                    <td>@((MarkupString)Num.EthToGwei(tx.Value))</td>
                </tr>
            </Virtualize>
        </tbody>
    </table>

    <nav>
        <ul class="pagination">
            <li class="page-item@(_isPreviousDisabled ? " disabled":"")"><a class="page-link" href="address?page=@(Page-1)&hash=@Addr" aria-disabled=@_isPreviousDisabled>previous</a></li>
            <li class="page-item@(_isNextDisabled ? " disabled":"")"><a class="page-link" href="address?page=@(Page+1)&hash=@Addr" aria-disabled=@_isNextDisabled>next</a></li>
            <div class="mx-2 my-2">page @Page</div>
        </ul>
    </nav>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "hash")]
    public string? Addr { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "page")]
    public int? Page { get; set; }

    private const int AddressPageSize = 25;
    private bool _isPreviousDisabled, _isNextDisabled;

    List<TxListResult>? addrTxs;

    protected override async Task OnParametersSetAsync()
    {
        if (!Page.HasValue || Page < 1) Page = 1;
        _isPreviousDisabled = (Page.Value == 1);
        _isNextDisabled = true;

        if (Addr != null)
        {
            var addr = await Cache.AccountCache.Get(Http, Addr, Page.Value, AddressPageSize);
            if (addr != null && addr.Message == "OK")
            {
                addrTxs = addr.Result;
                if (addrTxs.Count == AddressPageSize)
                    _isNextDisabled = false;
                return;
            }
            NavigationManager.NavigateTo("searchfailed");
        }
    }
}