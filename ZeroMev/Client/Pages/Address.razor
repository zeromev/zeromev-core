@page "/address"
@inject HttpClient Http
@inject ZMCache Cache
@inject NavigationManager NavigationManager

@if (addrTxs == null)
{
    <p class="placeholder-glow"><span class="placeholder col-4"></span></p>

    <div class="table-responsive">
        <table class="placeholder-glow table table-sm">
            <thead>
                <tr>
                    <th scope="col"><span class="placeholder" style="display: inline-block; width: 230px;"></span></th>
                    <th scope="col"><span class="placeholder" style="display: inline-block; width: 90px;"></span></th>
                    <th scope="col"><span class="placeholder" style="display: inline-block; width: 170px;"></span></th>
                    <th scope="col"><span class="placeholder" style="display: inline-block; width: 230px;"></span></th>
                    <th scope="col"><span class="placeholder" style="display: inline-block; width: 230px;"></span></th>
                    <th scope="col"><span class="placeholder" style="display: inline-block; width: 230px;"></span></th>
                    <th scope="col"><span class="placeholder" style="display: inline-block; width: 230px;"></span></th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < AddressPageSize; i++)
                {
                    <tr>
                        <td><span class="placeholder" style="display: inline-block; width: 230px;"></span></td>
                        <td><span class="placeholder" style="display: inline-block; width: 90px;"></span></td>
                        <td><span class="placeholder" style="display: inline-block; width: 170px;"></span></td>
                        <td><span class="placeholder" style="display: inline-block; width: 230px;"></span></td>
                        <td><span class="placeholder" style="display: inline-block; width: 230px;"></span></td>
                        <td><span class="placeholder" style="display: inline-block; width: 230px;"></span></td>
                        <td><span class="placeholder" style="display: inline-block; width: 230px;"></span></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <p class="placeholder-glow" aria-hidden="true">
        <span class="placeholder col-1"></span>
    </p>
}
else
{
    <p style="white-space: normal; word-break: break-word;">
        <img src="/addr.svg" width=32 height=32>
        <span class="h4"> address </span><small>@Addr</small>
        @if (@Addr=="0x9008d19f58aabd9ed0d60971565aa8510560ab41")
        {
            <abbr title="cowswap mev protection address (see cow.fi)"><img src="/cow.png" width=32 height=32 alt="cowswap"></abbr>
        }
    </p>

    <div class="table-res">
        <table class="table table-hover table-sm tableflx">
            <thead>
                <tr>
                    <th scope="col">tx hash</th>
                    <th scope="col">nonce</th>
                    <th scope="col">block number</th>
                    <th scope="col">time</th>
                    <th scope="col">from</th>
                    <th scope="col">to</th>
                    <th scope="col">value (Eth)</th>
                </tr>
            </thead>
            <tbody>
                <Virtualize Items="@addrTxs" Context="tx">
                    <tr>
                        <td><a href="block?num=@tx.BlockNumber&txi=@tx.TransactionIndex">@((MarkupString)Num.ShortenHexAbbr(tx.Hash,16))</a></td>
                        <td>@tx.Nonce</td>
                        <td>@tx.BlockNumber</td>
                        <td>@(DateTimeOffset.FromUnixTimeSeconds(long.Parse(tx.TimeStamp)).ToUniversalTime().DateTime)</td>
                        <td>@((MarkupString)Num.ShortenHexAbbr(tx.From,16))</td>
                        <td>@((MarkupString)Num.ShortenHexAbbr(tx.To,16))</td>
                        <td>@((MarkupString)Num.EthToGwei(tx.Value))</td>
                    </tr>
                </Virtualize>
            </tbody>
        </table>
    </div>

    <nav>
        <ul class="pagination">
            <li class="page-item@(_isPreviousDisabled ? " disabled":"")"><a class="page-link" href="address?page=@(Page-1)&hash=@Addr" aria-disabled=@_isPreviousDisabled>previous</a></li>
            <li class="page-item@(_isNextDisabled ? " disabled":"")"><a class="page-link" href="address?page=@(Page+1)&hash=@Addr" aria-disabled=@_isNextDisabled>next</a></li>
            <div class="mx-2 my-2">page @Page</div>
        </ul>
    </nav>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "hash")]
    public string? Addr { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "page")]
    public int? Page { get; set; }

    private const int AddressPageSize = 12;
    private bool _isPreviousDisabled, _isNextDisabled;

    List<TxListResult>? addrTxs;

    protected override async Task OnParametersSetAsync()
    {
        if (!Page.HasValue || Page < 1) Page = 1;
        _isPreviousDisabled = (Page.Value == 1);
        _isNextDisabled = true;

        if (Addr != null)
        {
            var addr = await Cache.AccountCache.Get(Http, Addr, Page.Value, AddressPageSize);
            if (addr != null && addr.Message == "OK")
            {
                addrTxs = addr.Result;
                if (addrTxs.Count == AddressPageSize)
                    _isNextDisabled = false;
                return;
            }
            NavigationManager.NavigateTo("searchfailed");
        }
    }
}